#!/bin/bash

# Script para ejecutar el proyecto Onboarding Flow en modo desarrollo local con PostgreSQL en Docker
# Autor: Sistema de Gesti√≥n de Onboarding
# Fecha: 3 de junio de 2025

set -e  # Exit on any error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar mensajes con color
print_message() {
    echo -e "${2}${1}${NC}"
}

print_message "üöÄ Iniciando proyecto Onboarding Flow en modo desarrollo local..." $BLUE

# Verificar sistema operativo
OS="$(uname -s)"
case "${OS}" in
    Linux*)     MACHINE=Linux;;
    Darwin*)    MACHINE=Mac;;
    CYGWIN*)    MACHINE=Cygwin;;
    MINGW*)     MACHINE=MinGw;;
    *)          MACHINE="UNKNOWN:${OS}"
esac

print_message "üñ•Ô∏è  Sistema operativo detectado: $MACHINE" $BLUE

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Funci√≥n para verificar si un puerto est√° en uso
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_message "‚ö†Ô∏è  El puerto $port est√° en uso" $YELLOW
        print_message "üîç Proceso usando el puerto:" $YELLOW
        lsof -Pi :$port -sTCP:LISTEN
        read -p "¬øDeseas continuar? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message "‚ùå Operaci√≥n cancelada" $RED
            exit 1
        fi
    fi
}

# Verificar dependencias
print_message "üîç Verificando dependencias..." $BLUE

# Verificar Docker
if ! command_exists docker; then
    print_message "‚ùå Docker no est√° instalado" $RED
    print_message "üì• Instala Docker desde: https://docs.docker.com/get-docker/" $YELLOW
    exit 1
fi

# Verificar si Docker est√° corriendo
if ! docker info >/dev/null 2>&1; then
    print_message "‚ùå Docker no est√° corriendo" $RED
    print_message "üöÄ Inicia Docker Desktop o el daemon de Docker" $YELLOW
    exit 1
fi

# Verificar Python
if ! command_exists python3; then
    print_message "‚ùå Python 3 no est√° instalado" $RED
    if [[ "$MACHINE" == "Mac" ]]; then
        print_message "üì• Instala Python con: brew install python" $YELLOW
    elif [[ "$MACHINE" == "Linux" ]]; then
        print_message "üì• Instala Python con: sudo apt install python3 python3-pip" $YELLOW
    fi
    exit 1
fi

# Verificar Node.js
if ! command_exists node; then
    print_message "‚ùå Node.js no est√° instalado" $RED
    if [[ "$MACHINE" == "Mac" ]]; then
        print_message "üì• Instala Node.js con: brew install node" $YELLOW
    elif [[ "$MACHINE" == "Linux" ]]; then
        print_message "üì• Instala Node.js desde: https://nodejs.org/" $YELLOW
    fi
    exit 1
fi

# Verificar npm
if ! command_exists npm; then
    print_message "‚ùå npm no est√° instalado" $RED
    print_message "üì• npm deber√≠a venir con Node.js" $YELLOW
    exit 1
fi

print_message "‚úÖ Todas las dependencias est√°n instaladas" $GREEN

# Verificar puertos
print_message "üîç Verificando puertos disponibles..." $BLUE
check_port 5001  # Frontend (Vite dev server)
check_port 5002  # Backend (FastAPI)
check_port 5436  # PostgreSQL Docker

# Variables para PostgreSQL
DB_CONTAINER_NAME="onboarding_flow-db-local"
DB_PORT=5436
DB_USER="postgres"
DB_PASSWORD="password"
DB_NAME="onboarding_flow"

# Funci√≥n para matar procesos en segundo plano al salir
cleanup() {
    print_message "üõë Deteniendo servicios..." $YELLOW
    
    # Detener procesos de desarrollo
    if [[ ! -z "$BACKEND_PID" ]]; then
        kill $BACKEND_PID 2>/dev/null || true
    fi
    if [[ ! -z "$FRONTEND_PID" ]]; then
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    
    # Preguntar si detener el contenedor de PostgreSQL
    echo
    read -p "¬øQuieres detener tambi√©n el contenedor de PostgreSQL? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_message "üê≥ Deteniendo contenedor PostgreSQL..." $YELLOW
        docker stop $DB_CONTAINER_NAME 2>/dev/null || true
        print_message "‚úÖ Contenedor PostgreSQL detenido" $GREEN
    else
        print_message "‚ÑπÔ∏è  El contenedor PostgreSQL seguir√° corriendo" $BLUE
        print_message "üîß Para detenerlo manualmente: docker stop $DB_CONTAINER_NAME" $YELLOW
    fi
    
    print_message "üëã ¬°Hasta luego!" $GREEN
}

trap cleanup EXIT INT TERM

# Configurar PostgreSQL en Docker
print_message "üê≥ Configurando PostgreSQL en Docker..." $BLUE

# Verificar si el contenedor ya existe
if docker ps -a --format "table {{.Names}}" | grep -q "^${DB_CONTAINER_NAME}$"; then
    print_message "üì¶ Contenedor PostgreSQL ya existe" $BLUE
    
    # Verificar si est√° corriendo
    if docker ps --format "table {{.Names}}" | grep -q "^${DB_CONTAINER_NAME}$"; then
        print_message "‚úÖ PostgreSQL ya est√° corriendo" $GREEN
    else
        print_message "üöÄ Iniciando contenedor PostgreSQL existente..." $YELLOW
        docker start $DB_CONTAINER_NAME
        print_message "‚úÖ PostgreSQL iniciado" $GREEN
    fi
else
    print_message "üì¶ Creando nuevo contenedor PostgreSQL..." $YELLOW
    docker run -d \
        --name $DB_CONTAINER_NAME \
        -e POSTGRES_USER=$DB_USER \
        -e POSTGRES_PASSWORD=$DB_PASSWORD \
        -e POSTGRES_DB=$DB_NAME \
        -p $DB_PORT:5432 \
        -v onboarding_flow-db-data-local:/var/lib/postgresql/data \
        postgres:latest
    
    print_message "‚úÖ Contenedor PostgreSQL creado e iniciado" $GREEN
fi

# Esperar a que PostgreSQL est√© listo
print_message "‚è≥ Esperando a que PostgreSQL est√© listo..." $YELLOW
timeout=30
counter=0
while ! docker exec $DB_CONTAINER_NAME pg_isready -U $DB_USER >/dev/null 2>&1; do
    if [ $counter -eq $timeout ]; then
        print_message "‚ùå Timeout esperando PostgreSQL" $RED
        exit 1
    fi
    sleep 1
    counter=$((counter + 1))
done

print_message "‚úÖ PostgreSQL est√° listo" $GREEN

# Verificar/crear la base de datos
print_message "üóÑÔ∏è  Verificando base de datos..." $BLUE
if ! docker exec $DB_CONTAINER_NAME psql -U $DB_USER -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
    print_message "üìù Creando base de datos $DB_NAME..." $YELLOW
    docker exec $DB_CONTAINER_NAME createdb -U $DB_USER $DB_NAME
    print_message "‚úÖ Base de datos creada" $GREEN
else
    print_message "‚úÖ Base de datos ya existe" $GREEN
fi

# Configurar Backend
print_message "üêç Configurando Backend (FastAPI)..." $BLUE

cd backend

# Crear entorno virtual si no existe
if [[ ! -d "venv" ]]; then
    print_message "üì¶ Creando entorno virtual..." $YELLOW
    python3 -m venv venv
fi

# Activar entorno virtual
print_message "üîß Activando entorno virtual..." $YELLOW
source venv/bin/activate

# Instalar dependencias
print_message "üì¶ Instalando dependencias Python..." $YELLOW
pip install -q --upgrade pip
pip install -q -r requirements.txt

# Verificar/crear archivo .env
print_message "üìù Configurando variables de entorno..." $YELLOW
if [[ ! -f ".env" ]]; then
    print_message "üìù Creando archivo .env..." $YELLOW
    echo "DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@localhost:$DB_PORT/$DB_NAME" > .env
else
    # Actualizar .env para usar la configuraci√≥n de Docker
    if grep -q "DATABASE_URL" .env; then
        sed -i.bak "s|DATABASE_URL=.*|DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@localhost:$DB_PORT/$DB_NAME|" .env
    else
        echo "DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@localhost:$DB_PORT/$DB_NAME" >> .env
    fi
fi

print_message "‚úÖ Variables de entorno configuradas" $GREEN

# Iniciar backend en segundo plano
print_message "üöÄ Iniciando Backend en puerto 5002..." $GREEN
cd app
uvicorn main:app --host 0.0.0.0 --port 5002 --reload > ../backend.log 2>&1 &
BACKEND_PID=$!

# Volver al directorio ra√≠z
cd ../..

# Configurar Frontend
print_message "‚öõÔ∏è  Configurando Frontend (React + Vite)..." $BLUE

cd frontend

# Instalar dependencias
print_message "üì¶ Instalando dependencias Node.js..." $YELLOW
npm install --silent

# Iniciar frontend en segundo plano
print_message "üöÄ Iniciando Frontend en puerto 5001..." $GREEN
npm run dev > ../frontend.log 2>&1 &
FRONTEND_PID=$!

# Volver al directorio ra√≠z
cd ..

# Esperar a que los servicios est√©n listos
print_message "‚è≥ Esperando a que los servicios est√©n listos..." $YELLOW
sleep 5

# Verificar si los servicios est√°n corriendo
print_message "üîç Verificando servicios..." $BLUE

# Verificar PostgreSQL
if docker exec $DB_CONTAINER_NAME pg_isready -U $DB_USER >/dev/null 2>&1; then
    print_message "‚úÖ PostgreSQL est√° corriendo correctamente" $GREEN
else
    print_message "‚ùå Problema con PostgreSQL" $RED
fi

# Verificar backend
if curl -s http://localhost:5002/health > /dev/null 2>&1; then
    print_message "‚úÖ Backend est√° corriendo correctamente" $GREEN
else
    print_message "‚ö†Ô∏è  Backend puede estar iniciando a√∫n..." $YELLOW
fi

# Verificar frontend
if curl -s http://localhost:5001 > /dev/null 2>&1; then
    print_message "‚úÖ Frontend est√° corriendo correctamente" $GREEN
else
    print_message "‚ö†Ô∏è  Frontend puede estar iniciando a√∫n..." $YELLOW
fi

print_message "üéâ ¬°Proyecto iniciado exitosamente!" $GREEN
print_message "üì± Accede a la aplicaci√≥n en:" $BLUE
echo -e "   ${GREEN}‚Ä¢ Frontend: ${NC}http://localhost:5001"
echo -e "   ${GREEN}‚Ä¢ Backend API: ${NC}http://localhost:5002"
echo -e "   ${GREEN}‚Ä¢ Documentaci√≥n API: ${NC}http://localhost:5002/docs"
echo -e "   ${GREEN}‚Ä¢ Base de datos: ${NC}localhost:$DB_PORT"

print_message "üìã Informaci√≥n de la base de datos:" $BLUE
echo -e "   ${YELLOW}‚Ä¢ Contenedor: ${NC}$DB_CONTAINER_NAME"
echo -e "   ${YELLOW}‚Ä¢ Usuario: ${NC}$DB_USER"
echo -e "   ${YELLOW}‚Ä¢ Base de datos: ${NC}$DB_NAME"
echo -e "   ${YELLOW}‚Ä¢ Puerto: ${NC}$DB_PORT"

print_message "üìã Archivos de log:" $BLUE
echo -e "   ${YELLOW}‚Ä¢ Backend: ${NC}backend/backend.log"
echo -e "   ${YELLOW}‚Ä¢ Frontend: ${NC}frontend.log"
echo -e "   ${YELLOW}‚Ä¢ PostgreSQL: ${NC}docker logs $DB_CONTAINER_NAME"

print_message "‚öôÔ∏è  Variables de entorno:" $BLUE
echo -e "   ${YELLOW}‚Ä¢ VITE_API_URL: ${NC}http://localhost:5002/"
echo -e "   ${YELLOW}‚Ä¢ DATABASE_URL: ${NC}postgresql://$DB_USER:***@localhost:$DB_PORT/$DB_NAME"

print_message "üìã Comandos √∫tiles:" $BLUE
echo -e "   ${YELLOW}‚Ä¢ Ver logs backend: ${NC}tail -f backend/backend.log"
echo -e "   ${YELLOW}‚Ä¢ Ver logs frontend: ${NC}tail -f frontend.log"
echo -e "   ${YELLOW}‚Ä¢ Ver logs PostgreSQL: ${NC}docker logs -f $DB_CONTAINER_NAME"
echo -e "   ${YELLOW}‚Ä¢ Acceder a PostgreSQL: ${NC}docker exec -it $DB_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME"
echo -e "   ${YELLOW}‚Ä¢ Reiniciar PostgreSQL: ${NC}docker restart $DB_CONTAINER_NAME"
echo -e "   ${YELLOW}‚Ä¢ Detener PostgreSQL: ${NC}docker stop $DB_CONTAINER_NAME"

print_message "üîÑ Los servicios est√°n corriendo en segundo plano..." $BLUE
print_message "üõë Presiona Ctrl+C para detener todos los servicios" $YELLOW

# Mantener el script corriendo y mostrar logs
echo
read -p "¬øQuieres ver los logs en tiempo real? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_message "üìã Mostrando logs (Ctrl+C para salir)..." $BLUE
    echo -e "${BLUE}=== BACKEND LOGS ===${NC}"
    tail -f backend/backend.log &
    echo -e "${BLUE}=== FRONTEND LOGS ===${NC}"
    tail -f frontend.log &
    echo -e "${BLUE}=== POSTGRESQL LOGS ===${NC}"
    docker logs -f $DB_CONTAINER_NAME &
    wait
else
    print_message "‚úÖ Servicios corriendo en segundo plano" $GREEN
    print_message "üîç Para monitorear backend: tail -f backend/backend.log" $YELLOW
    print_message "üîç Para monitorear PostgreSQL: docker logs -f $DB_CONTAINER_NAME" $YELLOW
    print_message "üõë Para detener: kill $BACKEND_PID $FRONTEND_PID" $YELLOW
    
    # Mantener el script corriendo hasta Ctrl+C
    while true; do
        sleep 1
    done
fi